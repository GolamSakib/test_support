<?php

namespace App\Http\Controllers\Api\V2;

use Carbon\Carbon;
use App\Models\shop;
use App\Models\User;
use App\Models\Support;
use App\Models\Customer;
use App\Models\Software;
use App\Models\ClientUser;
use App\Models\ProblemType;
use Illuminate\Http\Request;
use App\Models\CustomerSoftware;
use Illuminate\Support\Facades\DB;
use App\Events\supportPersonAllData;
use Illuminate\Support\Facades\Auth;
use App\Models\SoftwareSupportPerson;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Artisan;



class SupportRequestController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    /**
     * @OA\Post(
     *     path="/api/v2/support-request/store-by-support-person",
     *     operationId="supportGeneratedBySupportPerson",
     *     tags={"Support"},
     *     summary="Store a support request generated by the support person",
     *     security={ {"bearerAuth": {} }},
     *     @OA\RequestBody(
     *         required=true,
     *         @OA\MediaType(
     *             mediaType="multipart/form-data",
     *             @OA\Schema(
     *                 @OA\Property(
     *                     property="user_id",
     *                     type="integer",
     *                     description="The ID of the user",
     *                     example="1"
     *                 ),
     *                 @OA\Property(
     *                     property="problem_type_id",
     *                     type="integer",
     *                     description="The ID of the problem type",
     *                     example="2"
     *                 ),
     *                 @OA\Property(
     *                     property="software_id",
     *                     type="integer",
     *                     description="The ID of the software",
     *                     example="3"
     *                 ),
     *                 @OA\Property(
     *                     property="title",
     *                     type="string",
     *                     description="The title of the support request",
     *                     example="Support Request Title"
     *                 ),
     *                 @OA\Property(
     *                     property="description",
     *                     type="string",
     *                     description="The description of the support request",
     *                     example="Support Request Description"
     *                 ),
     *                 @OA\Property(
     *                     property="image",
     *                     type="file",
     *                     description="The image file (JPEG, PNG, JPG, GIF, SVG) attached to the support request"
     *                 )
     *             )
     *         )
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="Success",
     *         @OA\JsonContent()
     *     ),
     *     @OA\Response(
     *         response=400,
     *         description="Bad Request"
     *     )
     * )
     */
    public function support_generated_by_support_person(Request $request)
    {
        // dd($request->all());
        $validatedData = $request->validate([
            'user_id' => 'required|numeric',
            'client_id' => 'required|numeric',
            'problem_type_id' => 'required|numeric',
            'software_id' => 'required|numeric',
            'title' => 'nullable|string',
            'description' => 'nullable|string',
            'image' => 'nullable'
        ]);
        $support_person = Auth::user();
        if (!$support_person) {
            return JsonDataResponse($support_person);
        }
        $validatedData['accepted_support_id'] = $support_person->id;
        $validatedData['accepted_support_username'] = $support_person->username;

        $check_user = ClientUser::find($validatedData['user_id']);
        if (!$check_user) {
            return JsonDataResponse($check_user);
        }
        $validatedData['client_user_name'] = $check_user->username;
        $validatedData['client_user_phone'] = $check_user->phoneno;
        $validatedData['shop_name'] = $check_user->shopname;

        $client = Customer::find($validatedData['client_id']);
        if (!$client) {
            return JsonDataResponse($client);
        }
        $validatedData['client_name'] = $client->cusname;

        $software = Software::find($validatedData['software_id']);
        if (!$software) {
            return JsonDataResponse($software);
        }
        $problem_type = ProblemType::find($validatedData['problem_type_id']);
        if (!$problem_type) {
            return JsonDataResponse($problem_type);
        }

        $validatedData['p_type'] = $problem_type->typeName;


        $validatedData['requested_time'] = Carbon::now();
        $validatedData['image'] = $request->file('image');
        if ($validatedData['image']) {
            $fileExtension = $validatedData['image']->extension();
            $filename = $check_user->username . '_' . $check_user->id . '.' . $fileExtension;
            $validatedData['image'] = $validatedData['image']->storeAs('uploads/users/support_request', $filename);
        }

        // $validatedData['is_done'] = 1;
        // $validatedData['done_time'] = Carbon::now();
        $validatedData['support_accepted_time'] = Carbon::now();
        // $support_request = Support::create($validatedData);
        $support_request = Support::create([
            'problem_type_id' => $validatedData['problem_type_id'],
            'p_type' => $validatedData['p_type'],
            'soft_id' => $validatedData['software_id'],
            'soft_name' => $software->soft_name,
            'title' => $validatedData['title'],
            'p_description' => $validatedData['description'],
            'prob_file_url' => $validatedData['image'],
            'client_user_id' => $validatedData['user_id'],
            'client_user_name' => $validatedData['client_user_name'],
            'client_user_phone' => $validatedData['client_user_phone'],
            'shop_name' => $validatedData['shop_name'],
            'client_id' => $validatedData['client_id'],
            'client_name' => $validatedData['client_name'],
            'requested_time' => $validatedData['requested_time'],
            'is_pending' => false,
            'is_done' =>  false,
            // 'done_time' =>  $validatedData['done_time'],
            'is_processing' => true,
            'is_support' => false,
            'is_accepted' => false,
            'is_transfer' => false,
            'is_rated' => false,
            'not_accepted' => false,
            'accepted_support_id' =>  $validatedData['accepted_support_id'],
            'accepted_support_username' => $validatedData['accepted_support_username'],
            'support_accepted_time' => $validatedData['support_accepted_time'],
        ]);

        Artisan::call('cache:clear');
        Artisan::call('view:clear');
        return saveDataResponse($support_request);
    }

    public function support_list_for_client(Request $request)
    {
        $start_time = null;
        $end_time = null;

        if ($request->has('start_time') && $request->has('end_time')) {
            $start_time = Carbon::parse($request->start_time)->startOfDay();
            $end_time = Carbon::parse($request->end_time)->endOfDay();
        }

        $user = Auth::user();
        if (!$user) {
            return JsonDataResponse($user);
        } else {

            $supports = DB::table('supportadmin_problems as support')
                ->where('support.client_user_id', $user->id)
                ->leftJoin('addusers_customer as customer', DB::raw('customer.id::text'), '=', 'support.client_id')
                ->leftJoin('supportadmin_problemtype as problemType', 'problemType.id', '=', 'support.problem_type_id')
                ->leftJoin('supportadmin_support_user as users', 'users.id', 'support.accepted_support_id')
                ->leftJoin(
                    'client_support_admin_softwarelistall as software',
                    DB::raw('software.id::text'),
                    '=',
                    'support.soft_id'
                )
                ->when($start_time && $end_time, function ($query) use ($start_time, $end_time) {
                    $query->whereBetween('support.requested_time', [$start_time, $end_time]);
                })
                ->select(
                    'support.id',
                    'customer.cusname as client_name',
                    'software.soft_name as software_name',
                    'problemType.typeName as problem_type',
                    'users.username as support_username',
                    'support.p_description as support_description',
                    'support.prob_file_url as image',
                    'support.comment',
                    'support.is_pending',
                    'support.is_processing',
                    'support.is_done',
                    'support.is_refused',
                    'support.is_refused',
                    'support.requested_time',
                )
                ->orderBy('support.requested_time', 'desc')
                ->get();



            if (!$supports) {
                return JsonDataResponse($supports);
            } else {
                return JsonDataResponse($supports);
            }
        }
    }

    /**
     * @OA\Post(
     *     path="/api/v2/support-request/store-by-user",
     *     operationId="supportGeneratedByUser",
     *     tags={"Support"},
     *     summary="Store a support request generated by the user",
     *     security={ {"bearerAuth": {} }},
     *     @OA\RequestBody(
     *         required=true,
     *         @OA\MediaType(
     *             mediaType="multipart/form-data",
     *             @OA\Schema(
     *                 @OA\Property(
     *                     property="problem_type_id",
     *                     type="integer",
     *                     description="The ID of the problem type",
     *                     example="1"
     *                 ),
     *                 @OA\Property(
     *                     property="software_id",
     *                     type="integer",
     *                     description="The ID of the software",
     *                     example="2"
     *                 ),
     *                 @OA\Property(
     *                     property="title",
     *                     type="string",
     *                     description="The title of the support request",
     *                     example="Support Request Title"
     *                 ),
     *                 @OA\Property(
     *                     property="description",
     *                     type="string",
     *                     description="The description of the support request",
     *                     example="Support Request Description"
     *                 ),
     *                 @OA\Property(
     *                     property="image",
     *                     type="file",
     *                     description="The image file (JPEG, PNG, JPG, GIF, SVG) attached to the support request"
     *                 )
     *             )
     *         )
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="Data saved successfully."
     *     ),
     *     @OA\Response(
     *         response=400,
     *         description="An error occurred while saving the data."
     *     )
     * )
     */
    public function support_generated_by_user(Request $request)
    {
        $validatedData = $request->validate([
            'problem_type_id' => 'required|numeric',
            'software_id' => 'required|numeric',
            'title' => 'nullable',
            'description' => 'required',
            'image' => 'sometimes'
        ]);

        $request->all();
        $user = Auth::user();
        // $check_user = User::find($user->id);
        $check_user = ClientUser::find($user->id);
        if (!$check_user) {
            return JsonDataResponse($check_user);
        }
        //  dd("1");
        $validatedData['user_id'] = $check_user->id;
        $validatedData['client_user_name'] = $check_user->username;
        $validatedData['client_user_phone'] = $check_user->phoneno;
        $validatedData['shop_name'] = $check_user->shopname;

        // $customer_id = $check_user->customer_id;
        $customer_id = $check_user->client_id;
        if (!$customer_id) {
            return JsonDataResponse($customer_id);
        }
        //  dd("2");
        $validatedData['customer_id'] = $customer_id;
        $customer = Customer::find($validatedData['customer_id']);
        if (!$customer) {
            return JsonDataResponse($customer);
        }

        $validatedData['customer_name'] = $customer->cusname;


        // $shop_id = Shop::where('user_id', $user->id)->where('customer_id', $customer_id)->first();
        // if (!$shop_id) {
        //     return JsonDataResponse($shop_id);
        // }
        //  dd("3");
        // $validatedData['shop_id'] = $shop_id->id;
        $software = Software::find($validatedData['software_id']);
        if (!$software) {
            return JsonDataResponse($software);
        }
        //  dd("4");
        $problem_type = ProblemType::find($validatedData['problem_type_id']);
        if (!$problem_type) {
            return JsonDataResponse($problem_type);
        }
        //  dd("5");
        $validatedData['requested_time'] = Carbon::now();
        $validatedData['image'] = $request->file('image');
        if ($validatedData['image']) {
            $fileExtension = $validatedData['image']->extension();
            $filename = $user->name . '_' . $user->id . '.' . $fileExtension;
            $validatedData['image'] = $validatedData['image']->storeAs('uploads/users/support_request', $filename);
        }
        $validatedData['is_pending'] = 1;
        // $support_request = Support::create($validatedData);
        $support_request = Support::create([
            'problem_type_id' => $validatedData['problem_type_id'],
            'p_type' => $problem_type->typeName,
            'soft_id' => $validatedData['software_id'],
            'soft_name' => $software->soft_name,
            'title' => $validatedData['title'],
            'p_description' => $validatedData['description'],
            'prob_file_url' => $validatedData['image'],
            'client_user_id' => $validatedData['user_id'],
            'client_id' => $validatedData['customer_id'],
            'client_name' => $validatedData['customer_name'],
            'client_user_name' => $validatedData['client_user_name'],
            'client_user_phone' => $validatedData['client_user_phone'],
            'shop_name' => $validatedData['shop_name'],
            'requested_time' => $validatedData['requested_time'],
            'is_pending' => $validatedData['is_pending'],
            'is_done' => false,
            'is_processing' => false,
            'is_support' => false,
            'is_accepted' => false,
            'is_transfer' => false,
            'is_rated' => false,
            'not_accepted' => false,
        ]);


        if ($support_request) {
            Artisan::call('cache:clear');
            Artisan::call('view:clear');

            return response()->json([
                "success" => true,
                'status' => 200,
                'message' => 'Data Saved Successfully.'
            ], 200);
        } else {
            return response()->json([
                "success" => false,
                'status' => 401,
                'message' => 'An error occurred while saving the data.'
            ],401);
        }
    }


    /**
     * @OA\Get(
     *     path="/api/v2/support-requests",
     *     operationId="support Generated By User",
     *     tags={"Support"},
     *     summary="Get a listing of the support requests",
     *     security={ {"bearerAuth": {} }},
     *     @OA\Response(
     *         response=200,
     *      description="Data retrieved successfully."
     *     ),
     * )
     */
    public function support_request_list()
    {
        $support_request = Support::with('softwareSupportPerson')->whereNull('accepted_support_id');

        if (!Auth::user()->hasRole('Admin')) {
            $support_request = $support_request->whereHas('softwareSupportPerson', function ($query) {
                return $query->where('customer_software_id', Auth::user()->id);
            })->get();
            $support_request = $support_request->filter(function ($query) {
                return !Carbon::parse($query->requested_time)->addMinute(15)->isPast();
            });
        } else {
            $support_request = $support_request->get();
        }
        return JsonDataResponse($support_request);
    }

    public function changeProcessingSupportToDone(Request $request)
    {

        $id = $request->id;
        $solved_text = $request->solved_text??"";
        $note_for_support = $request->note_for_support??"";
        $support = Support::where('id', $id)->first();
        // $support->solved_text = $solved_text;
        $data = $support->update([
            'comment' => $solved_text,
            'note_for_support' => $note_for_support,
            'is_processing' => 0,
            'is_done' => 1,
            'is_pending' => 0,
            'is_transfer' => 0,
            // $support->completed_time = Carbon::now();
            'done_time' => Carbon::now()
        ]);
        // $support->comment = $solved_text;
        // $support->is_processing = 0;
        // $support->is_done = 1;
        // $support->is_pending = 0;
        // $support->is_transfer = 0;
        // // $support->completed_time = Carbon::now();
        // $support->done_time = Carbon::now();
        // $data = $support->save();

        Artisan::call('cache:clear');
        Artisan::call('view:clear');

        // $user = Auth::user();
        // $cacheKey = 'support_profile_individual_' . $user->id;
        // if (Cache::has($cacheKey)) {
        //     Cache::forget($cacheKey);
        // }
        return JsonDataResponse($data);
    }

    public function changePendingStatusToSeen(Request $request)
    {
        if ($request->has('id')) {
            $id = $request->id;
            $data = Support::whereIn('id', $id)->update([
                'status' => 'seen'
            ]);
        }
    }



    public function changeSupportStatusToAccepted(Request $request)
    {
        $user = Auth::user();
        $id = $request->id;
        $support=User::where('id', $id)->first();
        $support = Support::where('id', $id)->first();
        if (!$support) {
            return JsonDataResponse($support);
        } else {
            $support->is_accepted = 1;
            $support->accepted_support_id = $user->id;
            $support->accepted_support_username = $support->username;
            $support->is_pending = 0;
            $support->is_processing = 1;
            $support->support_accepted_time = carbon::now();
            $support->is_transfer = 0;
            $data = $support->save();
            broadcast(new supportPersonAllData(true))->toOthers();
            return JsonDataResponse($data);
        }
    }

    public function changeSupportStatusToHelpAccepted(Request $request)
    {
        $user = Auth::user();
        $id = $request->id;
        $support = Support::where('id', $id)->first();
        if (!$support) {
            return JsonDataResponse($support);
        } else {
            $data = $support->update([
                'is_accepted' => 1,
                'accepted_support_id' => $user->id,
                'is_pending' => 0,
                'is_processing' => 1,
                'support_accepted_time' => carbon::now(),
                'is_transfer' => 0,
                'is_helped' => 0,
                'is_helped_done' => 1
            ]);
            // $support->is_accepted = 1;
            // $support->accepted_support_id = $user->id;
            // $support->is_pending = 0;
            // $support->is_processing = 1;
            // $support->support_accepted_time = carbon::now();
            // $support->is_transfer = 0;
            // $support->is_helped = 0;
            // $support->is_helped_done = 1;
            // $data = $support->save();
            return JsonDataResponse($data);
        }
    }

    public function changeSupportStatusToCancel(Request $request)
    {
        $cancelled_by = Auth::user()->id;
        $id = $request->id;
        $cancel_note = $request->cancel_note;
        $support = Support::where('id', $id)->first();
        if (!$support) {
            return JsonDataResponse($support);
        }
        $support->is_pending = 0;
        $support->canceled_by = $cancelled_by;
        // $support->is_cancel = 1;
        $support->is_refused = 1;
        // $support->cancel_note = $cancel_note;
        $support->comment = $cancel_note;
        // $support->is_transfer = 1;
        // $support->is_transfer = 0;
        $data = $support->save();
        return JsonDataResponse($data);
    }

    public function helpGiverPerson(Request $request)
    {
        $user = Auth::user();
        $id = $request->customer_id;
        $customer = Customer::where('id', $id)->first();
        if ($customer != null) {

            $supports = User::select('id', 'username')->where('id', '<>', $user->id)->where(function ($query) {
                $query->where('role', 'Support')->orWhere('role', 'support');
            })->get();

            if ($supports) {
                return JsonDataResponse($supports);
            } else {
                return JsonDataResponse($supports);
            }
        }
    }

    public function supportpersonForClient(Request $request)
    {
        $customer_id = $request->customer_id;
        $support_person = DB::table('software_support_people')
            ->select('users.name', 'users.id')
            ->leftjoin('users', 'users.id', 'software_support_people.user_id')
            ->where('software_support_people.customer_id', $customer_id)
            ->get();
        if (!$support_person) {
            return JsonDataResponse($support_person);
        } else {
            return JsonDataResponse($support_person);
        }
    }

    public function changeHelpStatus(Request $request)
    {
        $id = $request->id;
        $user_id = $request->user_id;
        $helped_note = $request->helped_note ?? null;
        $support = Support::find($id);
        if (!$support) {
            return JsonDataResponse($support);
        } else {
            $user = User::find($user_id);
            if (!$user) {
                JsonDataResponse($user);
            }

            $data = $support->update([
                'is_helped' => true,
                'is_pending' => 0,
                'is_processing' => 0,
                'helped_note' => $helped_note,
                'helped_by' => $user->username,
                'helped_by_id' => $user_id
            ]);
            return JsonDataResponse($data);
        }
    }

    public function assignrequesttosupport(Request $request)
    {

        $id = $request->id;
        $user_id = $request->user_id;
        $support = Support::find($id);
        if (!$support) {
            return JsonDataResponse($support);
        } else {
            $support->is_pending = 0;
            $support->is_processing = 1;
            $support->accepted_support_id = $user_id;
            $support->support_accepted_time = Carbon::now();
            $support->is_transfer = 0;
            $data = $support->save();
            return JsonDataResponse($data);
        }
    }


    public function client_support_list($clientId)
    {

        $customer = Customer::find($clientId);
        if (!$customer) {
            return response()->json([
                'success' => false,
                'status' => 404,
                'message' => 'Not Found',
            ],404);
        }

        $supports = DB::table('supportadmin_problems as support')
                ->where('support.client_id', $clientId)
                ->leftJoin('addusers_customer as customer', DB::raw('customer.id::text'), '=', 'support.client_id')
                ->leftJoin('supportadmin_problemtype as problemType', 'problemType.id', '=', 'support.problem_type_id')
                ->leftJoin('supportadmin_support_user as users', 'users.id', 'support.accepted_support_id')
                ->leftJoin(
                    'client_support_admin_softwarelistall as software',
                    DB::raw('software.id::text'),
                    '=',
                    'support.soft_id'
                )
                ->select(
                    'support.id',
                    'support.client_id',
                    'customer.cusname as client_name',
                    'support.client_user_name',
                    'support.shop_name',
                    'software.soft_name as software_name',
                    'problemType.typeName as problem_type',
                    'users.username as support_username',
                    'support.p_description as support_description',
                    'support.prob_file_url as image',
                    'support.comment',
                    'support.is_pending',
                    'support.is_processing',
                    'support.is_done',
                    'support.requested_time',
                )
                ->orderBy('support.requested_time', 'desc')
                ->get();


            return response()->json([
                'success' => true,
                'status' => 200,
                'data' => $supports
            ], 200);


    }
}
